AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda function to cleanup old images in ECR'
Parameters:
  ScheduleExpression:
    Type: String
    Description: 'The schedule expression for the lambda invocation'
    Default: 'rate(1 day)'
Resources:
  FunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'ecr:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
  CleanFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt [FunctionRole, Arn]
      Code:
        ZipFile: !Sub |
            "use strict";

            var AWS = require('aws-sdk');
            var ecr = new AWS.ECR({region: process.env.AWS_REGION});

            function deleteImages(repoName, imageDigests) {
              var imageIds = imageDigests.map(digest => ({imageDigest: digest}));
              if (imageIds.length === 0) {
                return;
              }
              return ecr.batchDeleteImage({imageIds: imageIds, repositoryName: repoName}).promise();
            }

            function cleanRepo(repo) {
              console.log('INFO: Found repository: ' + repo);
              return ecr.listImages({repositoryName: repo}).promise().then(function (data) {
                var imageDigests = [];
                data.imageIds.forEach(function (image) {
                  if (!image.imageTag) {
                    console.log('INFO: Found image without tag: ' + image.imageDigest + ' in repository ' + repo);
                    imageDigests.push(image.imageDigest);
                  } else {
                    console.log('INFO: Image has tag: ' + image.imageTag + ' in repository ' + repo);
                  }
                });
                return deleteImages(repo, imageDigests);
              });
            }

            exports.handler = function (event, context, callback) {
              console.log("INFO: request Received.\nDetails:\n", JSON.stringify(event));

              ecr.describeRepositories({}).promise().then(function (data) {
                return Promise.all(data.repositories.map(repo => cleanRepo(repo.repositoryName)));
              }).then(function () {
                callback(null, 'Successfully cleaned ECR');
              }).catch(function (err) {
                console.log('ERROR: ', err, err.stack);
                callback(err);
              });
            };
      Runtime: nodejs4.3
      Timeout: '30'
  CleanRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression:
        Ref: ScheduleExpression
      Targets:
        - Id: ECRCleanScheduler
          Arn: !GetAtt [CleanFunction, Arn]
  InvokeLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt [CleanFunction, Arn]
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [CleanRule, Arn]
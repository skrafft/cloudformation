AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda function to signal CFN that instances are ready'
Resources:
  FunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'autoscaling:DescribeAutoScalingGroups'
                  - 'elasticloadbalancing:DescribeInstanceHealth'
                  - 'cloudformation:SignalResource'
                Resource: '*'
  Function:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt [FunctionRole, Arn]
      Code:
        ZipFile: !Sub |
            "use strict";

            var AWS = require('aws-sdk');

            var awsRegion = process.env.AWS_REGION;
            var autoscaling = new AWS.AutoScaling({region: awsRegion});
            var elb = new AWS.ELB({region: awsRegion});
            var cloudformation = new AWS.CloudFormation({region: awsRegion});

            function parseRequest(event) {
              var data = {};
              data.asgName = event.detail.AutoScalingGroupName;
              data.instanceId = event.detail.EC2InstanceId;
              return Promise.resolve(data);
            }

            function fetchASGDetails(data) {
              var params = {
                AutoScalingGroupNames: [
                  data.asgName
                ]
              };
              return autoscaling.describeAutoScalingGroups(params).promise().then(function (res) {
                var asg = res.AutoScalingGroups[0];

                asg.Tags.forEach(function (tag) {
                  if (tag.Key === 'aws:cloudformation:logical-id') {
                    data.logicalName = tag.Value;
                  } else if (tag.Key === 'aws:cloudformation:stack-name') {
                    data.stackName = tag.Value;
                  }
                });
                if (asg.LoadBalancerNames && asg.LoadBalancerNames.length > 0) {
                  data.elbName = asg.LoadBalancerNames[0];
                  console.log('INFO: Found load balancer', data.elbName, 'for auto scaling group', data.asgName);
                  return data;
                }
                return Promise.reject('Did not find ELB for group', data.asgName);
              });
            }

            function waitForInstanceToBeInService(data) {
              console.log('INFO: Waiting for instance', data.instanceId, 'to be InService');
              var params = {
                LoadBalancerName: data.elbName,
                Instances: [
                  {
                    InstanceId: data.instanceId
                  }
                ]
              };
              return elb.describeInstanceHealth(params).promise().then(function (info) {
                if (info.InstanceStates && info.InstanceStates.length === 1 && info.InstanceStates[0].State === 'InService') {
                  console.log('INFO: Instance', data.instanceId, 'has reached InService');
                  return data;
                } else {
                  return new Promise(function(resolve, reject){
                    setTimeout(function(){
                      resolve(data);
                    }, 5000);
                  }).then(waitForInstanceToBeInService);
                }
              });
            }

            function signalStackResource(data) {
              var params = {
                LogicalResourceId: data.logicalName,
                StackName: data.stackName,
                Status: 'SUCCESS',
                UniqueId: data.instanceId
              };
              return cloudformation.signalResource(params).promise();
            }

            exports.handler = function (event, context, callback) {
              console.log("INFO: request Received.\nDetails:\n", JSON.stringify(event));

              parseRequest(event)
                .then(fetchASGDetails)
                .then(waitForInstanceToBeInService)
                .then(signalStackResource)
                .then(function (data) {
                  callback(null, data);
                })
                .catch(function (err) {
                  console.log('ERROR: ', err, err.stack);
                  callback(null, err);
                });
            };
      Runtime: nodejs6.10
      Timeout: '300'
  InvokeLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt [Function, Arn]
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
Outputs:
  LambdaFunction:
    Description: 'The ARN of the Lambda'
    Value: !GetAtt [Function, Arn]
    Export:
      Name: RollingUpdateLambda